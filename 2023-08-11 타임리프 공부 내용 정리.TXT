타임리프는 2가지 메뉴얼을 제공한다
1. 기본 메뉴얼
-> 타임리프는 스프링 없이도 동작한다
2. 스프링 통합 메뉴얼
-> 스프링 통합을 위한 다양한 기능을 편리하게 제공한다

스프링 통합으로 추가되는 기능들
- 스프링의 SpringEL 문법 통합
- ${@myBean.doSomething()} 처럼 스프링 빈 호출 지원
- 편리한 폼 관리를 위한 추가 속성
->th:object (기능 강화, 폼 커맨드 객체 선택)
->th:field , th:errors , th:errorclass
- 폼 컴포넌트 기능
->checkbox, radio button, List 등을 편리하게 사용할 수 있는 기능 지원
- 스프링의 메시지, 국제화 기능의 편리한 통합
- 스프링의 검증, 오류 처리 통합
- 스프링의 변환 서비스 통합(ConversionService)

설정 방법
타임리프 템플릿 엔진을 스프링 빈에 등록하고, 타임리프용 뷰 리졸버를 스프링 빈으로 등록하는 방법
https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#the-springstandarddialect
https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#views-and-viewresolvers

=> 스프링 부트는 이런 부분을 모두 자동화 해준다

build.gradle 에 다음 한줄을 넣어주면 
Gradle은 타임리프와 관련된 라이브러리를 다운로드 받고, 
스프링 부트는 앞서 설명한 타임리프와 관련된 설정용 스프링 빈을 자동으로 등록해준다.

implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

타임리프 관련 설정을 변경하고 싶으면 다음을 참고해서 application.properties 에 추가하면 된다.
-> 스프링 부트가 제공하는 타임리프 설정, thymeleaf 검색 필요
https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-applicationproperties.
html#common-application-properties-templating

입력 폼 처리:
기본 문법
th:object: 커맨드 객체를 지정한다
*{...}: 선택 변수 식이라고 한다. th: object에서 선택한 객체에 접근한다
th:field -> HTML태그의 id, name, value 속성을 자동으로 처리해준다

th:object="${item}" -> form에서 사용할 객체를 지정한다 -> 이것을 통해 *{...}을 적용할 수 있다
th:field="*{itemName}-> th:field="${item.itemName}"과 같다 -> object로 지정해주었기 때문에 사용 가능
th:field가 자동으로 name과 value를 생성해준다


HTML  체크박스는 선택이 안되면 클라이언트에서 서버로 값 자체를 보내지 않는다
-> 이 방식이 문제되는 상황이 발생할 수 있음
-> 사용자가 의도적으로 체크되어 있던 값을 체크 해제해도 저장시 아무값도 넘어가지 않기 때문에
서버 구현에 따라서 값이 오지 않은 것으로 판단해서 값을 변경하지 않을 수도 있다
-> 이런 문제를 해결하기 위해서 스프링 MVC는 약간의 트릭을 사용하는데
히든필드를 하나 만드는 방식을 사용하는 것이다. _open처럼 기존 체크박스 이름앞에 _(언더스코어)를 붙여서
전송하면 체크를 해제했다고 인식할 수 있다.
-> 히든 필드는 항상 전송된다

이제 체크박스를 미체크해도 null이 아닌 false로 값이 오는 것을 확인할 수 있다

이런 귀찮은 방식도 있찌만 타임리프가 제공하는 체크박스 코드로 변경하는 방법도 있다
th:field="*{open}" -> 그냥 체크박스에 타임리프 적용하면 알아서 히든필드 생성해준다

타임리프의 체크 확인
checked="checked"
-> 체크 박스에서 판매 여부를 선택해서 저장하면, 조회시에 checked 속성이 추가된 것을 확인할 수 있다
-> 타임리프의 th:field를 사용하면 값이 true인 경우 체크를 자동으로 처리해준다

-- 스프링 부분 --
@ModelAttribute의 특별한 사용법
각각의 폼에서 체크박스를 반복해서 보여주어야 한다
-> model.addAttribute()로 귀찮게 반복해서 넣어주어야 한다
-> @ModelAttribute를 이용하여 별도의 메소드에 적용할 수 있게 만들어둔다
이렇게하면 해당 컨트롤러를 요청할 떄 regions에서 반환한 값이 자동으로 모델에 담기게된다
-> 물론 이렇게 사용하지 않고 각각의 컨트롤러 메소드에서 모델에 직접 데이터를 담아서 처리해도 된다
--end--


th:for="${#ids.prev('regions')}"
-> 멀티 체크박스는 같은 이름의 여러 체크박스를 만들 수 있는데 
반복해서 html 태그를 만들때 each 루프안에 반복해서 만들때 임의로 1,2,3 숫자를 뒤에 붙여준다
이것을 활용하여 #ids.prev('regions')로 동적으로 생성되는 id값을 사용할 수 있게 한다


-- 스프링 부분--
enum을 부를때는 enum클래스명[]
return ItemType.values()를 사용하면 ENUM의 모든 정보를 배열로 반환된다
--end--

라디오버튼은 이미 선택이 되어 있다면 수정시에도 항상 하나를 선택하도록 되어 있어서
체크박스와 달리 히든필드를 사용할 필요가 없다

타임리프에서 ENUM 직접 접근이 가능하다
<div th:each="type : ${T(hello.itemservice.domain.item.ItemType).values()}">
-> 이렇게 사용하면 ENUM 패키지 위치가 변경되거나 할때 차바 컴파일러가 타임리프까지 컴파일 오류를 잡을 수 없으므로
추천하지는 않는다



