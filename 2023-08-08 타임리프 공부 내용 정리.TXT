타임리프 특징:
- 서버사이드 HTML 렌더링 (SSR)
- 네츄럴 템플릿
- 스프링 통합지원

서버사이드 HTML 렌더링 (SSR):
- 타임리프는 백엔드 서버에서 HTML을 동적으로 렌더링 하는 용도로 사용된다

네츄럴 템플릿:
- 타임리프는 순수 HTML을 최대한 유지하는 특징이 있다
- 타임리프로 작성한 파일은 HTML을 유지하기 때문에 웹 브라우저에서 파일을 직접 열어도 내용 확인 가능하며,
서버를 통해 뷰 템플릿을 거치면 동적으로 변경된 결과를 확인할 수 있다
- JSP는 오직 서버를 통해서 렌더링 된 후에 HTML 응답 결과를 받아야 화면을 확인할 수 있는 반면 타임리프는 그렇지 않다는 점에서 
프론트엔드 개발자와의 협업에서 큰 효율을 발휘할 것으로 전망된다
-> 순수 HTML을 그대로 유지하면서 뷰 템플릿도 사용할 수 있는 타임리프의 특성

스프링 통합지원:
- 타임리프는 스프링과 자연스럽게 통합되고, 스프링의 다양한 기능을 편리하게 사용할 수 있게 지원한다.

타임리프 사용선언
<html xmlns th="http://www.thymeleaf.org">

기본 표현식:

간단한 표현들:
변수 표현: ${...}
선택 변수 표현s: *{...}
메세지 표현: #{...}
링크 URL 표현: @{...}
조각 표현: ~{...}

리터럴:
텍스트: 'one text', 'Another one!',…
- 숫자: 0, 34, 3.0, 12.3,…
- 불린: true, false
- 널: null
- 리터럴 토큰: one, sometext, main,…
문자 연산:
- 문자 합치기: +
- 리터럴 대체: |The name is ${name}|
산술 연산:
- Binary operators: +, -, *, /, %
- Minus sign (unary operator): -
불린 연산:
- Binary operators: and, or
- Boolean negation (unary operator): !, not
비교와 동등:
- 비교: >, <, >=, <= (gt, lt, ge, le)
- 동등 연산: ==, != (eq, ne)
조건 연산:
- If-then: (if) ? (then)
- If-then-else: (if) ? (then) : (else)
- Default: (value) ?: (defaultvalue)
특별한 토큰:
- No-Operation: _

위와 같은 표현식들이 존재하며, 더 많은 표현식은 추후 실습에서 사용하면서 필요할 때 문서를 보면서 습득해나갈 예정

text 출력
HTML 콘텐츠에 데이터를 출력할 때는 th:text를 사용한다
컨텐츠 안에 직접 출력하려면: [[{$data}]]

Escape(이스케이프)
HTML은 <,>와 같은 특수문자를 기반으로 정의된다

HTML 엔티티: 웹 브라우저는 <를 HTML 태그의 시작으로 인식한다 따라서 이것을 태그의 시작이 아니라 문자로 표현할 수 있는 방법이 필요하며
이것을 HTML 엔티티라고 한다. 그리고 이렇게 HTML에서 사용하는 특수문자를 HTML 엔티티로 변경하는 것을 이스케이프라고 한다
th:text, [[...]]는 기본적으로 이스케이프를 제공한다

< -> &lt;
> -> &gt;
html 엔티티 참고: https://symbl.cc/kr/html-entities/

Unescape
-> 이스케이프를 사용하지 않는 방법
th:text -> th:utext
[[...]] -> [(...)]

변수: SpringEL
타임리프에서 변수를 사용할 때는 변수 표현식을 사용한다
변수 표현식: ${...}
그리고 이 변수 표현식에는 스프링 EL이라는 스프링이 제공하는 표현식을 사용할 수 있다

Object
th:text="${user.username}" -> 직접 접근
th:text="${user['username']} -> 위와 같이 접근하고 이것이 user.getUsername()으로 바뀌어서 호출
th:text="${user.getUsername()} -> 직접 호출

List, Map방식도 동일하며, 각각의 맞는 방법으로 해당 객체를 찾아냄


유틸리티 객체와 날짜:
- 타임리프는 문자, 숫자, 날짜 URI등을 편리하게 다루는 다양한 유틸리티 객체들을 제공한다

타임리프 유틸리티 객체들:
- #message : 메시지, 국제화 처리
- #uris : URI 이스케이프 지원
- #dates : java.util.Date 서식 지원
- #calendars : java.util.Calendar 서식 지원
- #temporals : 자바8 날짜 서식 지원
- #numbers : 숫자 서식 지원
- #strings : 문자 관련 편의 기능
- #objects : 객체 관련 기능 제공
- #bools : boolean 관련 기능 제공
- #arrays : 배열 관련 기능 제공
- #lists , #sets , #maps : 컬렉션 관련 기능 제공
- #ids : 아이디 처리 관련 기능 제공, 뒤에서 설명

타임리프에서 자바 8의 날짜인 LocalDate, LocalDateTime, Instant를 사용하려면 추가 라이브러리가 필요하다
스프링 부트 타임 리프를 사용하면 해당 라이브러리가 자동으로 추가되고 통합된다

타임리프 자바8 날짜 지원 라이브러리
thymeleaf-extras-java8time

사용 예: 
기본: <li>default = <span th:text="${localDateTime}"></span></li>
<li>형식 = <span th:text="${#temporals.format(DateTime, 'yyyy-MM-dd HH:mm:ss')}"></span></li>


URL 링크:
단순 URL: @/{hello} -> /hello

쿼리 파라미터:
@{/hello(param1=${param1}, param2=${param2})} ->()에 있는 부분은 쿼리 파라미터로 처리

경로 변수:
@{/hello/{param1}/{param2}(param1=${param1}, param2=${param2})}
/hello/data1/data2
URL 경로 상에 변수가 있으면 ()부분은 경로 변수로 처리된다

경로 변수 + 쿼리 파라미터
@{/hello/{param1}(param1=${param1}, param2=${param2})}
/hello/data1?param2=data2
경로 변수와 쿼리 파라미터를 함께 사용할 수 있다

상대경로, 절대경로, 프로토콜 기준을 표현할 수 도 있다.
/hello : 절대 경로
hello : 상대 경로






